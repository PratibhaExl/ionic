To implement a reusable hook for managing dynamic forms with useFieldArray in React Hook Form, you can create a custom hook called useAddRows. This hook will encapsulate the logic for adding, removing, and managing rows in a dynamic form. Here's how you can do it:

1. Create the useAddRows Hook
The hook will use useFieldArray and provide functions to add and remove rows dynamically.

useAddRows.ts:
tsx
Copy code
import { useFieldArray, Control } from 'react-hook-form';

interface UseAddRowsProps<T> {
  control: Control<any>;
  name: string;
}

export const useAddRows = <T,>({ control, name }: UseAddRowsProps<T>) => {
  const { fields, append, remove } = useFieldArray<T>({
    control,
    name,
  });

  const addRow = (defaultValue: T) => {
    append(defaultValue);
  };

  const removeRow = (index: number) => {
    remove(index);
  };

  return {
    fields,
    addRow,
    removeRow,
  };
};
2. Using useAddRows in a React Component
Hereâ€™s how you can use the useAddRows hook in a React component with dynamic fields:

DynamicForm.tsx:
tsx
Copy code
import React from 'react';
import { useForm, FormProvider } from 'react-hook-form';
import { useAddRows } from './useAddRows';
import { TextField, Button, Grid } from '@mui/material';

interface FormValues {
  items: { name: string; value: string }[];
}

const DynamicForm: React.FC = () => {
  const methods = useForm<FormValues>({
    defaultValues: {
      items: [{ name: 'Default Item', value: '' }],
    },
  });

  const { control, handleSubmit } = methods;

  const { fields, addRow, removeRow } = useAddRows<{ name: string; value: string }>({
    control,
    name: 'items',
  });

  const onSubmit = (data: FormValues) => {
    console.log('Form Submitted:', data);
  };

  return (
    <FormProvider {...methods}>
      <form onSubmit={handleSubmit(onSubmit)}>
        <Grid container spacing={2}>
          {fields.map((field, index) => (
            <Grid item xs={12} key={field.id}>
              <TextField
                {...methods.register(`items.${index}.name`)}
                label={`Item ${index + 1} Name`}
                variant="outlined"
                fullWidth
              />
              <TextField
                {...methods.register(`items.${index}.value`)}
                label={`Item ${index + 1} Value`}
                variant="outlined"
                fullWidth
              />
              <Button
                variant="outlined"
                color="secondary"
                onClick={() => removeRow(index)}
                style={{ marginLeft: '10px' }}
              >
                Remove
              </Button>
            </Grid>
          ))}

          <Grid item xs={12}>
            <Button
              variant="contained"
              onClick={() => addRow({ name: '', value: '' })}
            >
              Add Row
            </Button>
          </Grid>

          <Grid item xs={12}>
            <Button type="submit" variant="contained" color="primary">
              Submit
            </Button>
          </Grid>
        </Grid>
      </form>
    </FormProvider>
  );
};

export default DynamicForm;
3. Key Features of useAddRows
fields: The array of current fields in the form.
addRow: A function to append a new row with default values.
removeRow: A function to remove a specific row by index.
Automatic Re-indexing: When you remove a row, React Hook Form automatically re-indexes the remaining fields.
4. How It Works
Initialize with Default Values:

The form starts with one default row ([{ name: 'Default Item', value: '' }]).
You can configure this based on your requirements.
Adding Rows:

When addRow is called, a new object ({ name: '', value: '' }) is appended to the items array.
Removing Rows:

When removeRow is called with an index, the corresponding entry in the items array is removed.
Dynamic Rendering:

The fields array is mapped to render TextField components for each row dynamically.
Form State Management:

react-hook-form ensures all fields are registered and their values are synced with the form state.
5. Benefits of useAddRows
Reusability: The hook can be reused across multiple components with different field configurations.
Scalability: Easily manage dynamic forms with complex field requirements.
Encapsulation: Keeps the logic for managing rows isolated from the component logic.
This approach provides a clean, modular way to manage dynamic form fields in React using react-hook-form.
















//*********


import React, { useState } from 'react';
import { useFormContext, Controller } from 'react-hook-form';
import { TextField, Button } from '@material-ui/core';

const HealthInfo = () => {
  const { control } = useFormContext();
  const [rows, setRows] = useState([]);

  const addRow = () => {
    setRows([...rows, { prescribedmedications: '', diagnosis: '' }]);
  };

  const removeRow = (index) => {
    const updatedRows = rows.filter((_, i) => i !== index);
    setRows(updatedRows);
  };

  return (
    <div>
      <h2>Health Info</h2>
      {rows.map((_, index) => (
        <div key={index} style={{ marginBottom: '20px' }}>
          <Controller
            name={`prescribedmedications[${index}]`}
            control={control}
            defaultValue=""
            render={({ field }) => (
              <TextField
                {...field}
                label="Prescribed Medications"
                variant="outlined"
                fullWidth
                style={{ marginBottom: '10px' }}
              />
            )}
          />
          <Controller
            name={`diagnosis[${index}]`}
            control={control}
            defaultValue=""
            render={({ field }) => (
              <TextField
                {...field}
                label="Reason for Medication (Diagnosis)"
                variant="outlined"
                fullWidth
                style={{ marginBottom: '10px' }}
              />
            )}
          />
          <Button variant="contained" color="secondary" onClick={() => removeRow(index)}>
            Remove Row
          </Button>
        </div>
      ))}
      <Button variant="contained" color="primary" onClick={addRow}>
        Add Row
      </Button>
    </div>
  );
};

export default HealthInfo;






import React, { useState } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { TextField, Button } from '@material-ui/core';

const DynamicForm = () => {
  const { control, handleSubmit, getValues, setValue } = useForm();
  const [rows, setRows] = useState([]);

  const addRow = () => {
    setRows([...rows, { prescribedmedications: '', diagnosis: '' }]);
  };

  const removeRow = (index) => {
    const updatedRows = rows.filter((_, i) => i !== index);
    setRows(updatedRows);
  };

  const onSubmit = (data) => {
    console.log('Form data:', data);
  };

  return (
    <div>
      <form onSubmit={handleSubmit(onSubmit)}>
        {rows.map((_, index) => (
          <div key={index} style={{ marginBottom: '20px' }}>
            <Controller
              name={`prescribedmedications[${index}]`}
              control={control}
              defaultValue=""
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Prescribed Medications"
                  variant="outlined"
                  fullWidth
                  style={{ marginBottom: '10px' }}
                />
              )}
            />
            <Controller
              name={`diagnosis[${index}]`}
              control={control}
              defaultValue=""
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Reason for Medication (Diagnosis)"
                  variant="outlined"
                  fullWidth
                  style={{ marginBottom: '10px' }}
                />
              )}
            />
            <Button variant="contained" color="secondary" onClick={() => removeRow(index)}>
              Remove Row
            </Button>
          </div>
        ))}

        <Button variant="contained" color="primary" onClick={addRow} style={{ marginBottom: '20px' }}>
          Add Row
        </Button>
        <Button variant="contained" color="primary" type="submit">
          Submit
        </Button>
      </form>
    </div>
  );
};

export default DynamicForm;
