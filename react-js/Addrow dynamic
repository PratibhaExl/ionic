

import { useFieldArray, Control, FieldValues } from 'react-hook-form';

interface UseAddRowsProps<T extends FieldValues> {
  control: Control<T>; // Control from react-hook-form with the proper type
  name: keyof T & string; // Field array name, must match keys in T
}

export const useAddRows = <T extends FieldValues>({
  control,
  name,
}: UseAddRowsProps<T>) => {
  const { fields, append, remove } = useFieldArray({
    control,
    name,
  });

  const addRow = (row: T[keyof T][number]) => {
    append(row); // Add a new row to the field array
  };

  const removeRow = (index: number) => {
    remove(index); // Remove a row by index
  };

  return {
    fields,
    addRow,
    removeRow,
  };
};


import React from 'react';
import { useForm, FormProvider } from 'react-hook-form';
import { useAddRows } from './useAddRows';
import { TextField, Button, Grid } from '@mui/material';

interface FormValues {
  agents: { name: string; email: string }[];
  products: { productName: string; price: string }[];
}

const DynamicForm: React.FC = () => {
  const methods = useForm<FormValues>({
    defaultValues: {
      agents: [{ name: 'Default Agent', email: 'agent@example.com' }],
      products: [{ productName: 'Default Product', price: '100' }],
    },
  });

  const { control, handleSubmit } = methods;

  // Using `useAddRows` for agents
  const {
    fields: agentFields,
    addRow: addAgentRow,
    removeRow: removeAgentRow,
  } = useAddRows<FormValues>({
    control,
    name: 'agents',
  });

  // Using `useAddRows` for products
  const {
    fields: productFields,
    addRow: addProductRow,
    removeRow: removeProductRow,
  } = useAddRows<FormValues>({
    control,
    name: 'products',
  });

  const onSubmit = (data: FormValues) => {
    console.log('Form Data:', data);
  };

  return (
    <FormProvider {...methods}>
      <form onSubmit={handleSubmit(onSubmit)}>
        <Grid container spacing={2}>
          {/* Agents Section */}
          <Grid item xs={12}>
            <h3>Agents</h3>
          </Grid>
          {agentFields.map((field, index) => (
            <Grid item xs={12} key={field.id}>
              <TextField
                {...methods.register(`agents.${index}.name`)}
                label={`Agent ${index + 1} Name`}
                variant="outlined"
                fullWidth
              />
              <TextField
                {...methods.register(`agents.${index}.email`)}
                label={`Agent ${index + 1} Email`}
                variant="outlined"
                fullWidth
                style={{ marginLeft: '10px' }}
              />
              <Button
                variant="outlined"
                color="secondary"
                onClick={() => removeAgentRow(index)}
                style={{ marginLeft: '10px' }}
              >
                Remove Agent
              </Button>
            </Grid>
          ))}
          <Grid item xs={12}>
            <Button
              variant="contained"
              onClick={() => addAgentRow({ name: '', email: '' })}
            >
              Add Agent
            </Button>
          </Grid>

          {/* Products Section */}
          <Grid item xs={12}>
            <h3>Products</h3>
          </Grid>
          {productFields.map((field, index) => (
            <Grid item xs={12} key={field.id}>
              <TextField
                {...methods.register(`products.${index}.productName`)}
                label={`Product ${index + 1} Name`}
                variant="outlined"
                fullWidth
              />
              <TextField
                {...methods.register(`products.${index}.price`)}
                label={`Product ${index + 1} Price`}
                variant="outlined"
                fullWidth
                style={{ marginLeft: '10px' }}
              />
              <Button
                variant="outlined"
                color="secondary"
                onClick={() => removeProductRow(index)}
                style={{ marginLeft: '10px' }}
              >
                Remove Product
              </Button>
            </Grid>
          ))}
          <Grid item xs={12}>
            <Button
              variant="contained"
              onClick={() => addProductRow({ productName: '', price: '' })}
            >
              Add Product
            </Button>
          </Grid>

          {/* Submit Button */}
          <Grid item xs={12}>
            <Button type="submit" variant="contained" color="primary">
              Submit
            </Button>
          </Grid>
        </Grid>
      </form>
    </FormProvider>
  );
};

export default DynamicForm;







//*********


import React, { useState } from 'react';
import { useFormContext, Controller } from 'react-hook-form';
import { TextField, Button } from '@material-ui/core';

const HealthInfo = () => {
  const { control } = useFormContext();
  const [rows, setRows] = useState([]);

  const addRow = () => {
    setRows([...rows, { prescribedmedications: '', diagnosis: '' }]);
  };

  const removeRow = (index) => {
    const updatedRows = rows.filter((_, i) => i !== index);
    setRows(updatedRows);
  };

  return (
    <div>
      <h2>Health Info</h2>
      {rows.map((_, index) => (
        <div key={index} style={{ marginBottom: '20px' }}>
          <Controller
            name={`prescribedmedications[${index}]`}
            control={control}
            defaultValue=""
            render={({ field }) => (
              <TextField
                {...field}
                label="Prescribed Medications"
                variant="outlined"
                fullWidth
                style={{ marginBottom: '10px' }}
              />
            )}
          />
          <Controller
            name={`diagnosis[${index}]`}
            control={control}
            defaultValue=""
            render={({ field }) => (
              <TextField
                {...field}
                label="Reason for Medication (Diagnosis)"
                variant="outlined"
                fullWidth
                style={{ marginBottom: '10px' }}
              />
            )}
          />
          <Button variant="contained" color="secondary" onClick={() => removeRow(index)}>
            Remove Row
          </Button>
        </div>
      ))}
      <Button variant="contained" color="primary" onClick={addRow}>
        Add Row
      </Button>
    </div>
  );
};

export default HealthInfo;






import React, { useState } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { TextField, Button } from '@material-ui/core';

const DynamicForm = () => {
  const { control, handleSubmit, getValues, setValue } = useForm();
  const [rows, setRows] = useState([]);

  const addRow = () => {
    setRows([...rows, { prescribedmedications: '', diagnosis: '' }]);
  };

  const removeRow = (index) => {
    const updatedRows = rows.filter((_, i) => i !== index);
    setRows(updatedRows);
  };

  const onSubmit = (data) => {
    console.log('Form data:', data);
  };

  return (
    <div>
      <form onSubmit={handleSubmit(onSubmit)}>
        {rows.map((_, index) => (
          <div key={index} style={{ marginBottom: '20px' }}>
            <Controller
              name={`prescribedmedications[${index}]`}
              control={control}
              defaultValue=""
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Prescribed Medications"
                  variant="outlined"
                  fullWidth
                  style={{ marginBottom: '10px' }}
                />
              )}
            />
            <Controller
              name={`diagnosis[${index}]`}
              control={control}
              defaultValue=""
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Reason for Medication (Diagnosis)"
                  variant="outlined"
                  fullWidth
                  style={{ marginBottom: '10px' }}
                />
              )}
            />
            <Button variant="contained" color="secondary" onClick={() => removeRow(index)}>
              Remove Row
            </Button>
          </div>
        ))}

        <Button variant="contained" color="primary" onClick={addRow} style={{ marginBottom: '20px' }}>
          Add Row
        </Button>
        <Button variant="contained" color="primary" type="submit">
          Submit
        </Button>
      </form>
    </div>
  );
};

export default DynamicForm;
