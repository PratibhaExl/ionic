import React, { useState } from "react";
import ForkLeftOutlinedIcon from "@mui/icons-material/ForkLeftOutlined";

const TriangleContent = ({ data, index, existingNodes, setExistingNodes }) => {
  const [isDragging, setIsDragging] = useState(false);
  const [position, setPosition] = useState({ x: index * 60, y: 50 }); // Auto-position nodes

  const handleDragStart = () => {
    setIsDragging(true);
  };

  const handleDragEnd = (event) => {
    setIsDragging(false);
    let newX = event.clientX - 25; // Adjust for center
    let newY = event.clientY - 25;

    // Check for collisions and adjust
    existingNodes.forEach((node) => {
      if (Math.abs(node.x - newX) < 60 && Math.abs(node.y - newY) < 60) {
        newX += 70; // Shift right if overlapping
      }
    });

    setPosition({ x: newX, y: newY });
    setExistingNodes([...existingNodes, { x: newX, y: newY }]);
  };

  return (
    <div
      className={`diamond-node ${isDragging ? "dragging" : ""}`}
      style={{
        width: 50,
        height: 50,
        backgroundColor: "rgb(232, 151, 8)",
        transform: "rotate(45deg)",
        position: "absolute",
        left: position.x,
        top: position.y,
        cursor: isDragging ? "grabbing" : "grab",
        transition: isDragging ? "none" : "transform 0.2s ease-out",
      }}
      onMouseDown={handleDragStart}
      onMouseUp={handleDragEnd}
    >
      <div className="diamond-content">
        <ForkLeftOutlinedIcon
          style={{
            color: "white",
            transform: "rotate(180deg)",
            fontSize: 40,
          }}
        />
        <div style={{ position: "absolute", right: "-80px", top: "0px" }}>
          <p>
            <span style={{ fontWeight: "bold" }}>
              {data.widgetData?.MidgetName}
            </span>
          </p>
        </div>
        <div style={{ position: "absolute", right: "-100px", top: "15px" }}>
          Choice
        </div>
      </div>
    </div>
  );
};

export default function TriangleContainer() {
  const [nodes, setNodes] = useState([]);

  return (
    <div style={{ width: "100%", height: "500px", position: "relative" }}>
      {[...Array(5)].map((_, index) => (
        <TriangleContent
          key={index}
          index={index}
          existingNodes={nodes}
          setExistingNodes={setNodes}
          data={{ widgetData: { MidgetName: `Node ${index + 1}` } }}
        />
      ))}
    </div>
  );
}
