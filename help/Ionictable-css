

<ion-grid class="custom-grid">
  <!-- Heading Row -->
  <ion-row class="heading-row">
    <ion-col size="12">
      <h1 class="heading-title">Responsive Grid Layout</h1>
    </ion-col>
  </ion-row>

  <!-- Data Rows -->
  <ion-row class="body-row">
    <ion-col size="12" size-md="6" class="col-item">
      <div class="data-card">
        <h2 class="card-title">Card Title 1</h2>
        <p class="card-body">
          This is some impressive and responsive data for mobile view and
          browser.
        </p>
      </div>
    </ion-col>

    <ion-col size="12" size-md="6" class="col-item">
      <div class="data-card">
        <h2 class="card-title">Card Title 2</h2>
        <p class="card-body">
          This section adjusts beautifully to various screen sizes and provides
          a seamless experience.
        </p>
      </div>
    </ion-col>

    <ion-col size="12" size-md="4" class="col-item">
      <div class="data-card">
        <h2 class="card-title">Card Title 3</h2>
        <p class="card-body">
          The content is well-aligned, aesthetically pleasing, and highly
          readable.
        </p>
      </div>
    </ion-col>

    <ion-col size="12" size-md="4" class="col-item">
      <div class="data-card">
        <h2 class="card-title">Card Title 4</h2>
        <p class="card-body">
          This layout maintains a balanced and organized appearance across all
          devices.
        </p>
      </div>
    </ion-col>

    <ion-col size="12" size-md="4" class="col-item">
      <div class="data-card">
        <h2 class="card-title">Card Title 5</h2>
        <p class="card-body">
          Flexible grid settings make it easy to create responsive designs.
        </p>
      </div>
    </ion-col>
  </ion-row>
</ion-grid>





.custom-grid {
  padding: 10px;
  max-width: 1200px;
  margin: 0 auto;
}

/* Heading Styles */
.heading-row {
  background-color: #007bff;
  color: #ffffff;
  text-align: center;
  padding: 20px 0;
  border-radius: 5px;
}

.heading-title {
  font-size: 24px;
  margin: 0;
}

/* Body Row Styles */
.body-row {
  margin-top: 20px;
}

/* Column Item Styles */
.col-item {
  padding: 10px;
}

/* Card Styles */
.data-card {
  background-color: #ffffff;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  padding: 20px;
  transition: transform 0.3s, box-shadow 0.3s;
}

.data-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.card-title {
  font-size: 20px;
  margin-bottom: 10px;
  color: #007bff;
}

.card-body {
  font-size: 16px;
  color: #555555;
  line-height: 1.5;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .heading-title {
    font-size: 20px;
  }

  .card-title {
    font-size: 18px;
  }

  .card-body {
    font-size: 14px;
  }
}









<!-- app.component.html -->
<ngx-datatable
  class="material striped"
  [rows]="rows"
  [columns]="columns"
  [columnMode]="'force'"
  [headerHeight]="50"
  [footerHeight]="50"
  [rowHeight]="'auto'"
  [scrollbarV]="true"
>
  <ngx-datatable-column name="Name" prop="name" [flexGrow]="1"></ngx-datatable-column>
  <ngx-datatable-column name="Email" prop="email" [flexGrow]="1"></ngx-datatable-column>
  <ngx-datatable-column name="Role" prop="role" [flexGrow]="1"></ngx-datatable-column>
  <ngx-datatable-column name="Actions" [flexGrow]="0.5">
    <ng-template ngx-datatable-cell-template let-row="row">
      <button
        ion-button
        fill="clear"
        color="primary"
        class="download-btn"
        (click)="onDownload(row.id)"
      >
        <ion-icon name="download-outline"></ion-icon>
      </button>
    </ng-template>
  </ngx-datatable-column>
</ngx-datatable>



// app.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent {
  columns = [
    { name: 'Name', prop: 'name' },
    { name: 'Email', prop: 'email' },
    { name: 'Role', prop: 'role' },
    { name: 'Actions' },
  ];

  rows = [
    { id: 1, name: 'John Doe', email: 'john.doe@example.com', role: 'Administrator' },
    { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com', role: 'Editor' },
    { id: 3, name: 'Alice Johnson', email: 'alice.johnson@example.com', role: 'Viewer' },
  ];

  onDownload(id: number) {
    // Implement your download functionality here
    console.log('Download clicked for ID:', id);
    // You can add further logic, such as calling a service to fetch data based on the ID
  }
}




/* app.component.css */
ngx-datatable {
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  overflow: hidden;
}

/* Header Styling */
.datatable-header {
  background-color: #007bff;
  color: #ffffff;
  font-weight: bold;
  text-align: left;
  padding: 12px;
}

/* Row and Cell Styling */
.datatable-body-row {
  transition: background-color 0.3s ease-in-out;
}

.datatable-body-row:hover {
  background-color: #f0f8ff;
}

.download-btn {
  margin: 0;
  padding: 0;
  color: #007bff;
}

ion-icon {
  font-size: 18px;
}



// ngx best approach data table and with serch in ionic dynamic 

<ion-header>
  <ion-toolbar>
    <ion-title>Data Table</ion-title>
  </ion-toolbar>
</ion-header>

<ion-content>
  <!-- Search bar for filtering rows -->
  <ion-searchbar [(ngModel)]="searchText" (ionInput)="filterRows()"></ion-searchbar>

  <!-- Data table with ngx-datatable -->
  <ngx-datatable
    class="material"
    [rows]="filteredRows"
    [columns]="columns"
    [columnMode]="'force'"
    [headerHeight]="50"
    [footerHeight]="50"
    [rowHeight]="'auto'"
    [scrollbarV]="true"
    [limit]="pageSize"
    [count]="totalRecords"
    [offset]="currentPage - 1"
    (page)='setPage($event)'
  >
    <ngx-datatable-column name="ID" prop="id" [width]="50"></ngx-datatable-column>
    <ngx-datatable-column name="Name" prop="name" [width]="150"></ngx-datatable-column>
    <ngx-datatable-column name="Email" prop="email" [width]="250"></ngx-datatable-column>
    <ngx-datatable-column name="Actions" [width]="100">
      <ng-template ngx-datatable-cell-template let-row="row">
        <ion-button
          fill="clear"
          color="primary"
          class="download-btn"
          (click)="onDownload(row.id)"
        >
          <ion-icon name="download-outline"></ion-icon>
        </ion-button>
      </ng-template>
    </ngx-datatable-column>
  </ngx-datatable>

  <!-- Pagination controls -->
  <ion-footer>
    <ion-toolbar>
      <ion-button expand="block" [disabled]="currentPage <= 1" (click)="previousPage()">
        Previous
      </ion-button>
      <ion-button expand="block" [disabled]="currentPage >= totalPages" (click)="nextPage()">
        Next
      </ion-button>
    </ion-toolbar>
  </ion-footer>
</ion-content>

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-data-table',
  templateUrl: './data-table.page.html',
  styleUrls: ['./data-table.page.scss'],
})
export class DataTablePage implements OnInit {
  rows = [];
  filteredRows = [];
  columns = [
    { name: 'ID', prop: 'id' },
    { name: 'Name', prop: 'name' },
    { name: 'Email', prop: 'email' },
    { name: 'Actions' },
  ];

  searchText = '';
  currentPage = 1;
  pageSize = 10;
  totalRecords = 0;
  totalPages = 0;

  constructor() {}

  ngOnInit() {
    // Fetch your data here
    this.rows = [
      { id: 1, name: 'John Doe', email: 'john.doe@example.com' },
      { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' },
      { id: 3, name: 'Alice Johnson', email: 'alice.johnson@example.com' },
      // Add more data here
    ];
    this.totalRecords = this.rows.length;
    this.totalPages = Math.ceil(this.totalRecords / this.pageSize);
    this.filterRows();
  }

  filterRows() {
    if (this.searchText.trim() === '') {
      this.filteredRows = this.rows.slice(
        (this.currentPage - 1) * this.pageSize,
        this.currentPage * this.pageSize
      );
    } else {
      this.filteredRows = this.rows
        .filter((row) =>
          row.name.toLowerCase().includes(this.searchText.toLowerCase())
        )
        .slice((this.currentPage - 1) * this.pageSize, this.currentPage * this.pageSize);
    }
  }

  onDownload(id: number) {
    // Your download logic goes here
    console.log('Download triggered for ID:', id);
  }

  setPage(event: any) {
    this.currentPage = event.offset + 1;
    this.filterRows();
  }

  nextPage() {
    if (this.currentPage < this.totalPages) {
      this.currentPage++;
      this.filterRows();
    }
  }

  previousPage() {
    if (this.currentPage > 1) {
      this.currentPage--;
      this.filterRows();
    }
  }
}

css

ngx-datatable {
  margin-top: 10px;
  border: 1px solid #e0e0e0;
  border-radius: 10px;
  overflow: hidden;
}

ion-button.download-btn {
  color: #007bff;
}

ngx-datatable .datatable-body-row:hover {
  background-color: #f0f8ff;
}

ion-searchbar {
  margin-bottom: 15px;
}

ion-footer {
  padding: 10px;
}

ion-toolbar {
  display: flex;
  justify-content: space-between;
}











