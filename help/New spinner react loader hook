
Create Spinner Hook:
tsx
Copy code
// useSpinner.ts
import { useState } from 'react';

const useSpinner = () => {
  const [loading, setLoading] = useState<boolean>(false);

  const showSpinner = () => setLoading(true);
  const hideSpinner = () => setLoading(false);

  return { loading, showSpinner, hideSpinner };
};

export default useSpinner;
Create Dynamic Spinner Component:
tsx
Copy code
// Spinner.tsx
import React from 'react';
import './Spinner.css';

const Spinner: React.FC = () => {
  return <div className="spinner"></div>;
};

export default Spinner;
Create CSS for Spinner:
css
Copy code
/* Spinner.css */
.spinner {
  border: 4px solid rgba(0, 0, 0, 0.1);
  border-left: 4px solid #3498db;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
Using in a React TypeScript (tsx) file:
tsx
Copy code
// YourComponent.tsx
import React from 'react';
import useSpinner from './useSpinner';
import Spinner from './Spinner';

const YourComponent: React.FC = () => {
  const { loading, showSpinner, hideSpinner } = useSpinner();

  const handleButtonClick = () => {
    showSpinner();
    // Perform asynchronous operation, e.g., API call
    setTimeout(() => {
      hideSpinner();
    }, 2000);
  };

  return (
    <div>
      <button onClick={handleButtonClick}>Show Spinner</button>
      {loading && <Spinner />}
      {/* Your other component content */}
    </div>
  );
};

export default YourComponent;
Make sure to import and use the YourComponent in your main application file. This example assumes you have a button triggering an asynchronous operation, during which the spinner is displayed. Adjust the logic as needed for your use case.




